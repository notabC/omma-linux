name: Build and Release

on:
  push:
    branches:
      - master
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write

jobs:
  build-arm64:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history to get tags

    - name: Get next version
      id: version
      run: |
        # Read version from Cargo.toml
        CARGO_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
        echo "Cargo.toml version: $CARGO_VERSION"

        # Extract version numbers
        MAJOR=$(echo $CARGO_VERSION | cut -d. -f1)
        MINOR=$(echo $CARGO_VERSION | cut -d. -f2)
        PATCH=$(echo $CARGO_VERSION | cut -d. -f3)

        # Increment patch version
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
        NEW_TAG="v${NEW_VERSION}"

        echo "New version: $NEW_VERSION"
        echo "New tag: $NEW_TAG"
        echo "version=$NEW_TAG" >> $GITHUB_OUTPUT
        echo "version_number=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Update Cargo.toml and push
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        # Update Cargo.toml with new version
        sed -i 's/^version = ".*"/version = "${{ steps.version.outputs.version_number }}"/' Cargo.toml

        # Commit and push (with [skip ci] to avoid infinite loop)
        git add Cargo.toml
        git commit -m "Bump version to ${{ steps.version.outputs.version_number }} [skip ci]"
        git push origin master

    - name: Create and push tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag ${{ steps.version.outputs.version }}
        git push origin ${{ steps.version.outputs.version }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build ARM64 binary
      run: |
        docker run --rm --platform linux/arm64 \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          fedora:latest \
          bash -c '
            set -e
            dnf install -y gtk4-devel gcc libadwaita-devel curl
            curl --proto "=https" --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            source "$HOME/.cargo/env"
            cargo build --release
            strip target/release/omma
          '

    - name: Prepare artifact
      run: |
        mkdir -p dist
        cp target/release/omma dist/omma-aarch64-unknown-linux-gnu
        chmod +x dist/omma-aarch64-unknown-linux-gnu
        ls -lh dist/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        files: dist/omma-aarch64-unknown-linux-gnu
        body: |
          ## Omma Linux ${{ steps.version.outputs.version }}

          **ARM64 build for Raspberry Pi 3/4/5 with 64-bit OS**

          ### Installation on Your Pi

          ```bash
          # Install dependencies (one-time)
          sudo apt-get update
          sudo apt-get install -y libgtk-4-1 libadwaita-1-0

          # Download the binary
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/omma-aarch64-unknown-linux-gnu

          # Make it executable
          chmod +x omma-aarch64-unknown-linux-gnu

          # Move to system path
          sudo mv omma-aarch64-unknown-linux-gnu /usr/local/bin/omma

          # Run it
          omma
          ```

          ### Build Details
          - **Platform**: ARM64 (aarch64-unknown-linux-gnu)
          - **Built with**: Fedora Docker image + QEMU
          - **Binary size**: ~450KB
          - **Runtime memory**: ~30MB RAM

          ### Features
          - Incubator management UI
          - Task tracking system
          - Real-time search and filtering
          - Native GTK4/libadwaita performance
          - Dark mode optimized for Pi displays

          ---
          ðŸ¤– Built automatically by GitHub Actions
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
