name: Build Omma for Raspberry Pi

on:
  push:
    branches: [ master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-linux-arm64:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build in ARM64 container
      run: |
        docker run --rm --platform linux/arm64 \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          debian:bookworm-slim \
          bash -c '
            apt-get update && \
            apt-get install -y \
              curl \
              build-essential \
              libgtk-4-dev \
              libadwaita-1-dev \
              pkg-config && \
            curl --proto "=https" --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && \
            . "$HOME/.cargo/env" && \
            cargo build --release && \
            strip target/release/omma
          '

    - name: Prepare artifact
      run: |
        mkdir -p dist
        cp target/release/omma dist/omma-aarch64-unknown-linux-gnu
        chmod +x dist/omma-aarch64-unknown-linux-gnu

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: omma-aarch64-unknown-linux-gnu
        path: dist/omma-aarch64-unknown-linux-gnu
        retention-days: 30

  build-linux-arm32:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build in ARM32 container
      run: |
        docker run --rm --platform linux/arm/v7 \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          debian:bookworm-slim \
          bash -c '
            apt-get update && \
            apt-get install -y \
              curl \
              build-essential \
              libgtk-4-dev \
              libadwaita-1-dev \
              pkg-config && \
            curl --proto "=https" --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && \
            . "$HOME/.cargo/env" && \
            cargo build --release && \
            strip target/release/omma
          '

    - name: Prepare artifact
      run: |
        mkdir -p dist
        cp target/release/omma dist/omma-armv7-unknown-linux-gnueabihf
        chmod +x dist/omma-armv7-unknown-linux-gnueabihf

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: omma-armv7-unknown-linux-gnueabihf
        path: dist/omma-armv7-unknown-linux-gnueabihf
        retention-days: 30

  create-release:
    needs: [build-linux-arm64, build-linux-arm32]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          omma-aarch64-unknown-linux-gnu/omma-aarch64-unknown-linux-gnu
          omma-armv7-unknown-linux-gnueabihf/omma-armv7-unknown-linux-gnueabihf
        body: |
          ## Omma Linux Release

          Download the appropriate binary for your Raspberry Pi:
          - **Raspberry Pi 3/4/5 (64-bit OS)**: `omma-aarch64-unknown-linux-gnu`
          - **Raspberry Pi 2/3 (32-bit OS)**: `omma-armv7-unknown-linux-gnueabihf`

          ### Installation
          ```bash
          # Download the binary (replace URL with actual release URL)
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/omma-aarch64-unknown-linux-gnu

          # Make it executable
          chmod +x omma-aarch64-unknown-linux-gnu

          # Move to /usr/local/bin (optional)
          sudo mv omma-aarch64-unknown-linux-gnu /usr/local/bin/omma

          # Run
          omma
          ```

          ### Requirements
          Install GTK4 and libadwaita on your Pi:
          ```bash
          sudo apt-get update
          sudo apt-get install -y libgtk-4-1 libadwaita-1-0
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
